name: KinD e2e tests

on:
  pull_request:
    branches: [ 'main' ]

defaults:
  run:
    shell: bash

jobs:

  e2e-tests:
    name: e2e tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        k8s-version:
        - v1.22.9
        - v1.23.6
        - v1.24.0

        test-suite:
        - ./test/conformance

        # Map between K8s and KinD versions.
        # This is attempting to make it a bit clearer what's being tested.
        # See: https://github.com/kubernetes-sigs/kind/releases/tag/v0.10.0
        include:
        - k8s-version: v1.22.9
          kind-version: v0.14.0
          kind-image-sha: sha256:8135260b959dfe320206eb36b3aeda9cffcb262f4b44cda6b33f7bb73f453105
        - k8s-version: v1.23.6
          kind-version: v0.14.0
          kind-image-sha: sha256:b1fa224cc6c7ff32455e0b1fd9cbfd3d3bc87ecaa8fcb06961ed1afb3db0f9ae
        - k8s-version: v1.24.0
          kind-version: v0.14.0
          kind-image-sha: sha256:0866296e693efe1fed79d5e6c7af8df71fc73ae45e3679af05342239cdc5bc8e

        # Add the flags we use for each of these test suites.
        - test-suite: ./test/conformance
          extra-test-flags: ""
    env:
      KO_DOCKER_REPO: kind.local
      SYSTEM_NAMESPACE: default
      # Use a semi-random cluster suffix, but somewhat predictable
      # so reruns don't just give us a completely new value.
      CLUSTER_SUFFIX: c${{ github.run_id }}.local
      ARTIFACTS: ${{ github.workspace }}/artifacts

    steps:
    - name: Set up Go 1.18.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.18.x

    - name: Install Dependencies
      working-directory: ./
      run: |
        echo '::group:: install ko'
        curl -L https://github.com/google/ko/releases/download/v0.6.0/ko_0.6.0_Linux_x86_64.tar.gz | tar xzf - ko
        chmod +x ./ko
        sudo mv ko /usr/local/bin
        echo '::endgroup::'

    - name: Check out code onto GOPATH
      uses: actions/checkout@v2

    - name: Install KinD
      run: |
        set -x

        # Disable swap otherwise memory enforcement doesn't work
        # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600009955324200
        sudo swapoff -a
        sudo rm -f /swapfile

        curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${{ matrix.kind-version }}/kind-$(uname)-amd64
        chmod +x ./kind
        sudo mv kind /usr/local/bin

    - name: Configure KinD Cluster
      run: |
        set -x

        # KinD configuration.
        cat > kind.yaml <<EOF
        apiVersion: kind.x-k8s.io/v1alpha4
        kind: Cluster

        # This is needed in order to support projected volumes with service account tokens.
        # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600268272383600
        kubeadmConfigPatches:
          - |
            apiVersion: kubeadm.k8s.io/v1beta2
            kind: ClusterConfiguration
            metadata:
              name: config
            apiServer:
              extraArgs:
                "service-account-issuer": "kubernetes.default.svc"
                "service-account-signing-key-file": "/etc/kubernetes/pki/sa.key"
            networking:
              dnsDomain: "${CLUSTER_SUFFIX}"
        nodes:
        - role: control-plane
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
        - role: worker
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
        EOF

    - name: Create KinD Cluster
      run: |
        set -x

        kind create cluster --config=kind.yaml

    - name: Upload Test Images
      run: |
        # Build and Publish our test images to the docker daemon.
        ./test/upload-test-images.sh

    - name: Run e2e Tests
      run: |
        # Run the tests tagged as e2e on the KinD cluster.
        go test -race -count=1 -parallel=12 -timeout=10m -tags=e2e \
           ${{ matrix.test-suite }} ${{ matrix.extra-test-flags }}

    - name: Collect system diagnostics
      if: ${{ failure() }}
      run: |
        kubectl -n${SYSTEM_NAMESPACE} get pods

        echo '::group:: describe'
        kubectl -n${SYSTEM_NAMESPACE} describe pods
        echo '::endgroup::'

        for x in $(kubectl get pods -n${SYSTEM_NAMESPACE} -oname); do
          echo "::group:: describe $x"
          kubectl -n${SYSTEM_NAMESPACE} describe $x
          echo '::endgroup::'

          echo "::group:: $x logs"
          kubectl -n${SYSTEM_NAMESPACE} logs $x --all-containers
          echo '::endgroup::'
        done

    - name: Dump Artifacts
      if: ${{ failure() }}
      run: |
        if [[ -d ${{ env.ARTIFACTS }} ]]; then
          cd ${{ env.ARTIFACTS }}
          for x in $(find . -type f); do
            echo "::group:: artifact $x"
            cat $x
            echo '::endgroup::'
          done
        fi
